{"version":3,"file":"app.bundle.js","mappings":"MAAAA,IAAIC,OAAO,mBAAoB,CAC3BC,OAAQ,0BACRC,MAAO,eACPC,UAAW,CACPC,YAAa,WACTC,OAAOC,OAAO,gCAAgCC,MAAMC,IAChDT,IAAIU,gBAAgB,CAChBD,UAAWA,EAAUE,QACrBC,QAASC,KAAKD,iBAOlCZ,IAAIC,OAAO,YAAa,CACpBC,OAAQ,iBACRY,MAAO,CACH,CAAEC,KAAM,QAASC,QAAS,SAC1B,CAAED,KAAM,cAAeC,QAAS,eAChC,CAAED,KAAM,OAAQC,QAAS,WAIjC,MAAMC,EAAQ,CACV,CACIC,MAAO,cACPC,YAAa,eACbC,MAAM,GAEV,CACIF,MAAO,cACPC,YAAa,eACbC,MAAM,GAEV,CACIF,MAAO,eACPE,MAAM,IAIRC,EAAarB,IAAIsB,OAAO,iBAAkB,CAC5CC,MAAO,YACPC,KAAMP,IAGajB,IAAIC,OAAO,yBAA0B,CACxDC,OAAQ,oBACRuB,MAAO,kBACPD,KAAMP,IAkBVjB,IAAI0B,SAAQ,WACRL,EAAWM,OAEX,MAiCMC,EAAY5B,IAAIsB,OAAO,iBAAkB,CAC3CO,GAAI,YACJC,MAAOT,EACPU,YAAY,EACZb,MAAO,YACPc,MAAO,IACPC,kBAAkB,EAClBC,oBAAoB,EACpBC,QAzCY,CACZ,CACIC,OAAQ,QACRC,UAAW,QACXR,GAAI,QACJS,KAAM,EACNC,UAAU,GAEd,CACIH,OAAQ,cACRC,UAAW,cACXR,GAAI,cACJS,KAAM,GACNC,UAAU,EACVC,UAAU,GAEd,CACIJ,OAAQ,OACRC,UAAW,OACXR,GAAI,OACJS,KAAM,GACNC,UAAU,EACVC,UAAU,EACVC,SAAU,SAAUC,EAAOC,EAAMC,EAAQC,EAAUC,EAAUhB,GACzD,OAAIY,EACO,IAEA,OAenBtC,UAAW,CACP2C,UAAW,CAACC,EAAMC,EAAIC,EAAWN,KAK7BA,EAAOO,IAAI,IACJP,EAAOpB,KACVJ,MAAOwB,EAAOpB,KAAKJ,WAiB7BgC,EAAYpD,IAAIsB,OAAO,CAGzBnB,MAAO,QACPkD,OAAQ,OAERrB,MAAO,IACPsB,OAAQ,IACRpC,MAAO,YACPqC,KAAM,YACNC,MAAO,CACH,CACIrD,MAAO,eACPsD,UAAW,kCACX7C,QAAS8C,SAASC,eAAe,SAErC/B,KAcFgC,EAAc5D,IAAIsB,OAAO,iBAAkB,CAC7CO,GAAI,cACJgC,QAAQ,EACR/B,MAAOT,EACPmC,MAAO,CACH,CACIrD,MAAO,YACP0B,GAAI,iBACJiC,WAAY,SAEhB,CACI3D,MAAO,WACP0B,GAAI,uBACJiC,WAAY,eAiBhB,CACI3D,MAAO,SACP4D,KAAM,MACN3D,UAAW,CACP4D,MAAO,IAAIC,KAEP5C,EAAW6C,IAAI,CACXhD,MAAOlB,IAAImE,OAAO,kBAAkBC,WACpCjD,YAAanB,IAAImE,OAAO,wBAAwBC,WAChDhD,MAAM,UAQxBiD,EAAerE,IAAIsB,OAAO,YAAa,CAGzC+B,OAAQ,MACRC,OAAQ,IACRtB,MAAO,IACPsC,SAAU,aACVC,MAAO,CACHC,YAAa,QACbC,YAAa,MACbC,YAAa,OAEjBxD,MAAO,WACPsC,MAAO,CAACI,KAEZS,EAAaM,OAEb,MAAMC,EAAkB5E,IAAIsB,OAAO,CAC/BnB,MAAO,SACP4D,KAAM,UACN3D,UAAW,CACP4D,MAAO,KACHK,EAAaQ,WAKzB7E,IAAIsB,OAAO,0BAA2B,CAClCwD,SAAU9E,IAAI+E,UACdC,OAAQ,SACRxB,MAAO,CAACJ,EAAWwB,EAAiBP,S","sources":["webpack://systemjs-react/./js/app.js"],"sourcesContent":["Ext.define('Ext.JsxContainer', {\n    extend: 'Ext.container.Container',\n    xtype: 'jsxcontainer',\n    listeners: {\n        afterrender: function () {\n            System.import('../src/components/BlueButton').then( Component => {\n                Ext.createComponent({\n                    Component: Component.default,\n                    element: this.element\n                });\n            });\n        }\n    }\n});\n\nExt.define('TodoModel', {\n    extend: 'Ext.data.Model',\n    field: [\n        { name: 'title', mapping: 'title' },\n        { name: 'description', mapping: 'description' },\n        { name: 'done', mapping: 'done' },\n    ]\n});\n\nconst todos = [\n    {\n        title: 'buy clothes',\n        description: 'nike, adidas',\n        done: true\n    },\n    {\n        title: 'sell stocks',\n        description: 'tesla, apple',\n        done: false\n    },\n    {\n        title: 'wash the car',\n        done: false\n    },\n];\n\nconst todosStore = Ext.create('Ext.data.Store', {\n    model: 'TodoModel',\n    data: todos\n});\n\nconst todosViewModel = Ext.define('CP.view.TodosViewModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.todos',\n    data: todos\n});\n\n// const todosStore = Ext.create('Ext.data.Store', {\n//     model: 'TodoModel',\n//     proxy: {\n//         type: 'rest',\n//         actionMethods: {\n//             read: 'POST'\n//         },\n//         url: 'http://localhost:5000',\n//         reader: {\n//             type: 'json',\n//             root: 'data'\n//         }\n//     }\n// });\n\nExt.onReady(function () {\n    todosStore.load();\n\n    const columns = [\n        {\n            header: 'Title',\n            dataIndex: 'title',\n            id: 'title',\n            flex: 1,\n            sortable: true\n        },\n        {\n            header: 'Description',\n            dataIndex: 'description',\n            id: 'description',\n            flex: .5,\n            sortable: true,\n            hideable: true\n        },\n        {\n            header: 'Done',\n            dataIndex: 'done',\n            id: 'done',\n            flex: .5,\n            sortable: true,\n            hideable: false,\n            renderer: function (value, meta, record, rowIndex, colIndex, store) {\n                if (value) {\n                    return 'V'\n                } else {\n                    return 'X'\n                }\n            }\n        },\n    ];\n\n    const todosGrid = Ext.create('Ext.grid.Panel', {\n        id: 'todosGrid',\n        store: todosStore,\n        stripeRows: true,\n        title: 'All Todos',\n        width: 600,\n        enableColumnMove: true,\n        enableColumnResize: true,\n        columns,\n        listeners: {\n            cellclick: (view, td, cellIndex, record) => {\n                // console.log({ view, td, cellIndex, record });\n                // REMOVE EXAMPLE\n                // const title = record.data.title;\n                // todosStore.removeAt(todosStore.find('title', title));\n                record.set({\n                    ...record.data,\n                    done: !record.data.done\n                });\n            }\n        },\n    });\n\n    // const todoPanel = Ext.create('Ext.Panel', {\n    //     // x: 0,\n    //     // y: 0,\n    //     anchor: '100%',\n    //     height: 200,\n    //     width: 600,\n    //     title: 'ToDo List',\n    //     html: 'ToDo List',\n    //     items: [todosGrid]\n    // });\n\n    const todoPanel = Ext.create({\n        // x: 0,\n        // y: 0,\n        xtype: 'panel',\n        anchor: '100%',\n        // height: 200,\n        width: 600,\n        height: 500,\n        title: 'ToDo List',\n        html: 'ToDo List',\n        items: [\n            {\n                xtype: 'jsxcontainer',\n                component: '../src/components/BlueButton.js',\n                element: document.getElementById('root')\n            },\n            todosGrid\n        ],\n        // listeners: {\n        //     afterrender: (panel) => {\n        //         System.import('../src/components/BlueButton.js').then( BlueButton => {\n        //             Ext.createComponent({\n        //                 Component: BlueButton.default,\n        //                 element: panel.body.el.dom\n        //             });\n        //         });\n        //     }\n        // }\n    });\n\n    const newTodoForm = Ext.create('Ext.form.Panel', {\n        id: 'newTodoForm',\n        border: true,\n        store: todosStore,\n        items: [\n            {\n                xtype: 'textfield',\n                id: 'titleTextfield',\n                fieldLabel: 'Title'\n            },\n            {\n                xtype: 'textarea',\n                id: 'descriptionTextfield',\n                fieldLabel: 'Description'\n            },\n            // {\n            //     xtype: 'fieldcontainer',\n            //     fieldLabel: 'Done?',\n            //     defaultType: 'radiofield',\n            //     items: [{\n            //         boxLabel: 'Yes',\n            //         inputValue: 'yes',\n            //         id: 'radioYes'\n            //     },\n            //     {\n            //         boxLabel: 'No',\n            //         inputValue: 'No',\n            //         id: 'radioNo'\n            //     }]\n            // },\n            {\n                xtype: 'button',\n                text: 'Add',\n                listeners: {\n                    click: (...args) => {\n                        // Ext.MessageBox.alert('Alert box', 'Button is clicked');\n                        todosStore.add({\n                            title: Ext.getCmp('titleTextfield').getValue(),\n                            description: Ext.getCmp('descriptionTextfield').getValue(),\n                            done: false\n                        })\n                    }\n                }\n            }\n        ]\n    });\n\n    const newTodoPanel = Ext.create('Ext.Panel', {\n        // x: 0,\n        // y: 300,\n        anchor: '50%',\n        height: 300,\n        width: 600,\n        hideMode: 'visibility',\n        style: {\n            borderStyle: 'solid',\n            borderWidth: '2px',\n            borderColor: 'red'\n        },\n        title: 'New ToDo',\n        items: [newTodoForm]\n    });\n    newTodoPanel.hide();\n\n    const showNewTodoForm = Ext.create({\n        xtype: 'button',\n        text: 'Add New',\n        listeners: {\n            click: () => {\n                newTodoPanel.show();\n            }\n        }\n    });\n\n    Ext.create('Ext.container.Container', {\n        renderTo: Ext.getBody(),\n        layout: 'anchor',\n        items: [todoPanel, showNewTodoForm, newTodoPanel]\n    })\n});"],"names":["Ext","define","extend","xtype","listeners","afterrender","System","import","then","Component","createComponent","default","element","this","field","name","mapping","todos","title","description","done","todosStore","create","model","data","alias","onReady","load","todosGrid","id","store","stripeRows","width","enableColumnMove","enableColumnResize","columns","header","dataIndex","flex","sortable","hideable","renderer","value","meta","record","rowIndex","colIndex","cellclick","view","td","cellIndex","set","todoPanel","anchor","height","html","items","component","document","getElementById","newTodoForm","border","fieldLabel","text","click","args","add","getCmp","getValue","newTodoPanel","hideMode","style","borderStyle","borderWidth","borderColor","hide","showNewTodoForm","show","renderTo","getBody","layout"],"sourceRoot":""}